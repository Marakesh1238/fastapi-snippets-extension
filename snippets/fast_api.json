{
  "FastAPI Project Structure": {
    "prefix": "fastapi-structure",
    "body": [
      "import os",
      "",
      "def create_fastapi_structure(project_name):",
      "    base_dir = project_name",
      "    structure = [",
      "        \"app/__init__.py\",",
      "        \"app/main.py\",",
      "        \"app/core/__init__.py\",",
      "        \"app/core/config.py\",",
      "        \"app/core/security.py\",",
      "        \"app/api/__init__.py\",",
      "        \"app/api/endpoints/__init__.py\",",
      "        \"app/api/endpoints/items.py\",",
      "        \"app/api/endpoints/users.py\",",
      "        \"app/models/__init__.py\",",
      "        \"app/models/base.py\",",
      "        \"app/models/user.py\",",
      "        \"app/models/item.py\",",
      "        \"app/schemas/__init__.py\",",
      "        \"app/schemas/user.py\",",
      "        \"app/schemas/item.py\",",
      "        \"app/services/__init__.py\",",
      "        \"app/services/user_service.py\",",
      "        \"app/crud/__init__.py\",",
      "        \"app/crud/base.py\",",
      "        \"app/crud/crud_user.py\",",
      "        \"app/crud/crud_item.py\",",
      "        \"app/db/__init__.py\",",
      "        \"app/db/session.py\",",
      "        \"app/db/base.py\",",
      "        \"tests/__init__.py\",",
      "        \"tests/test_api.py\",",
      "        \"tests/test_models.py\",",
      "        \"alembic/versions/.gitkeep\",",
      "        \"alembic/script.py.mako\",",
      "        \"alembic/env.py\",",
      "        \"requirements.txt\",",
      "        \"Dockerfile\",",
      "        \"docker-compose.yml\",",
      "        \".env\",",
      "        \".gitignore\",",
      "        \"alembic.ini\"",
      "    ]",
      "    ",
      "    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞",
      "    os.makedirs(base_dir, exist_ok=True)",
      "    ",
      "    for file_path in structure:",
      "        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å",
      "        full_path = os.path.join(base_dir, file_path)",
      "        ",
      "        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ",
      "        dir_path = os.path.dirname(full_path)",
      "        if dir_path:",
      "            os.makedirs(dir_path, exist_ok=True)",
      "        ",
      "        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª",
      "        with open(full_path, 'w', encoding='utf-8') as f:",
      "            if file_path.endswith('.py'):",
      "                f.write('')",
      "            elif file_path == 'requirements.txt':",
      "                f.write('fastapi\\\\nuvicorn\\\\nsqlalchemy\\\\nalembic\\\\npython-dotenv\\\\n')",
      "    ",
      "    print(f\"‚úÖ Project '{project_name}' structure created successfully!\")",
      "    print(f\"üìÅ Location: {os.path.abspath(base_dir)}\")",
      "",
      "if __name__ == \"__main__\":",
      "    create_fastapi_structure(\"my_fastapi_project\")"
    ],
    "description": "Create FastAPI project structure"
  },

  "FastAPI User Model": {
    "prefix": "fastapi-user-model",
    "body": [
      "from sqlalchemy import Column, Integer, String, Boolean, DateTime",
      "from sqlalchemy.sql import func",
      "from app.db.base import Base",
      "",
      "class User(Base):",
      "    __tablename__ = \"users\"",
      "    ",
      "    id = Column(Integer, primary_key=True, index=True)",
      "    email = Column(String, unique=True, index=True, nullable=False)",
      "    username = Column(String, unique=True, index=True, nullable=False)",
      "    hashed_password = Column(String, nullable=False)",
      "    full_name = Column(String, nullable=True)",
      "    is_active = Column(Boolean, default=True)",
      "    is_superuser = Column(Boolean, default=False)",
      "    created_at = Column(DateTime(timezone=True), server_default=func.now())",
      "    updated_at = Column(DateTime(timezone=True), onupdate=func.now())",
      "    ",
      "    def __repr__(self):",
      "        return f\"<User(id={self.id}, email={self.email}, username={self.username})>\""
    ],
    "description": "Create User SQLAlchemy model"
  },

  "FastAPI User Schemas": {
    "prefix": "fastapi-user-schemas",
    "body": [
      "from pydantic import BaseModel, EmailStr",
      "from typing import Optional",
      "from datetime import datetime",
      "",
      "# –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã",
      "class UserBase(BaseModel):",
      "    email: EmailStr",
      "    username: str",
      "    full_name: Optional[str] = None",
      "",
      "# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "class UserCreate(UserBase):",
      "    password: str",
      "",
      "# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "class UserUpdate(BaseModel):",
      "    email: Optional[EmailStr] = None",
      "    username: Optional[str] = None",
      "    full_name: Optional[str] = None",
      "    password: Optional[str] = None",
      "",
      "# –û—Ç–≤–µ—Ç API",
      "class UserResponse(UserBase):",
      "    id: int",
      "    is_active: bool",
      "    is_superuser: bool",
      "    created_at: datetime",
      "    updated_at: Optional[datetime] = None",
      "    ",
      "    class Config:",
      "        from_attributes = True",
      "",
      "# –û—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º",
      "class UserWithToken(UserResponse):",
      "    access_token: str",
      "    token_type: str = \"bearer\""
    ],
    "description": "Create User Pydantic schemas"
  },

  "FastAPI Item Model": {
    "prefix": "fastapi-item-model",
    "body": [
      "from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime",
      "from sqlalchemy.sql import func",
      "from sqlalchemy.orm import relationship",
      "from app.db.base import Base",
      "",
      "class Item(BaseModel):",
      "    __tablename__ = \"items\"",
      "    ",
      "    id = Column(Integer, primary_key=True, index=True)",
      "    title = Column(String, index=True, nullable=False)",
      "    description = Column(Text, nullable=True)",
      "    owner_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)",
      "    created_at = Column(DateTime(timezone=True), server_default=func.now())",
      "    updated_at = Column(DateTime(timezone=True), onupdate=func.now())",
      "    ",
      "    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
      "    owner = relationship(\"User\", back_populates=\"items\")",
      "    ",
      "    def __repr__(self):",
      "        return f\"<Item(id={self.id}, title={self.title}, owner_id={self.owner_id})>\""
    ],
    "description": "Create Item SQLAlchemy model"
  },

  "FastAPI Item Schemas": {
    "prefix": "fastapi-item-schemas",
    "body": [
      "from pydantic import BaseModel",
      "from typing import Optional",
      "from datetime import datetime",
      "",
      "class ItemBase(BaseModel):",
      "    title: str",
      "    description: Optional[str] = None",
      "",
      "class ItemCreate(ItemBase):",
      "    pass",
      "",
      "class ItemUpdate(BaseModel):",
      "    title: Optional[str] = None",
      "    description: Optional[str] = None",
      "",
      "class ItemResponse(ItemBase):",
      "    id: int",
      "    owner_id: int",
      "    created_at: datetime",
      "    updated_at: Optional[datetime] = None",
      "    ",
      "    class Config:",
      "        from_attributes = True"
    ],
    "description": "Create Item Pydantic schemas"
  },

  "FastAPI Database Session": {
    "prefix": "fastapi-db-session",
    "body": [
      "from sqlalchemy import create_engine",
      "from sqlalchemy.orm import sessionmaker",
      "from app.core.config import settings",
      "",
      "# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      "engine = create_engine(",
      "    settings.DATABASE_URL,",
      "    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º",
      "    echo=settings.DEBUG  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤",
      ")",
      "",
      "# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π",
      "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
      "",
      "# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö FastAPI)",
      "def get_db():",
      "    db = SessionLocal()",
      "    try:",
      "        yield db",
      "    finally:",
      "        db.close()"
    ],
    "description": "Create database session setup"
  },

  "FastAPI Base Model": {
    "prefix": "fastapi-base-model",
    "body": [
      "from sqlalchemy.ext.declarative import declarative_base",
      "",
      "# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π",
      "Base = declarative_base()",
      "",
      "# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–¥–µ—Å—å –¥–ª—è Alembic",
      "# from app.models.user import User",
      "# from app.models.item import Item"
    ],
    "description": "Create base SQLAlchemy model"
  },

  "FastAPI CRUD Base": {
    "prefix": "fastapi-crud-base",
    "body": [
      "from typing import Any, Dict, Generic, List, Optional, Type, TypeVar, Union",
      "from fastapi.encoders import jsonable_encoder",
      "from pydantic import BaseModel",
      "from sqlalchemy.orm import Session",
      "",
      "from app.db.base import Base",
      "",
      "ModelType = TypeVar(\"ModelType\", bound=Base)",
      "CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)",
      "UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)",
      "",
      "",
      "class CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):",
      "    def __init__(self, model: Type[ModelType]):",
      "        \"\"\"",
      "        CRUD object with default methods to Create, Read, Update, Delete (CRUD).",
      "        \"\"\"",
      "        self.model = model",
      "",
      "    def get(self, db: Session, id: Any) -> Optional[ModelType]:",
      "        return db.query(self.model).filter(self.model.id == id).first()",
      "",
      "    def get_multi(",
      "        self, db: Session, *, skip: int = 0, limit: int = 100",
      "    ) -> List[ModelType]:",
      "        return db.query(self.model).offset(skip).limit(limit).all()",
      "",
      "    def create(self, db: Session, *, obj_in: CreateSchemaType) -> ModelType:",
      "        obj_in_data = jsonable_encoder(obj_in)",
      "        db_obj = self.model(**obj_in_data)",
      "        db.add(db_obj)",
      "        db.commit()",
      "        db.refresh(db_obj)",
      "        return db_obj",
      "",
      "    def update(",
      "        self,",
      "        db: Session,",
      "        *,",
      "        db_obj: ModelType,",
      "        obj_in: Union[UpdateSchemaType, Dict[str, Any]]",
      "    ) -> ModelType:",
      "        obj_data = jsonable_encoder(db_obj)",
      "        if isinstance(obj_in, dict):",
      "            update_data = obj_in",
      "        else:",
      "            update_data = obj_in.dict(exclude_unset=True)",
      "        for field in obj_data:",
      "            if field in update_data:",
      "                setattr(db_obj, field, update_data[field])",
      "        db.add(db_obj)",
      "        db.commit()",
      "        db.refresh(db_obj)",
      "        return db_obj",
      "",
      "    def remove(self, db: Session, *, id: int) -> ModelType:",
      "        obj = db.query(self.model).get(id)",
      "        db.delete(obj)",
      "        db.commit()",
      "        return obj"
    ],
    "description": "Create base CRUD class"
  },

  "FastAPI CRUD User": {
    "prefix": "fastapi-crud-user",
    "body": [
      "from typing import Any, Dict, Optional, Union",
      "from sqlalchemy.orm import Session",
      "from passlib.context import CryptContext",
      "",
      "from app.crud.base import CRUDBase",
      "from app.models.user import User",
      "from app.schemas.user import UserCreate, UserUpdate",
      "",
      "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")",
      "",
      "",
      "class CRUDUser(CRUDBase[User, UserCreate, UserUpdate]):",
      "    def get_by_email(self, db: Session, *, email: str) -> Optional[User]:",
      "        return db.query(User).filter(User.email == email).first()",
      "",
      "    def get_by_username(self, db: Session, *, username: str) -> Optional[User]:",
      "        return db.query(User).filter(User.username == username).first()",
      "",
      "    def create(self, db: Session, *, obj_in: UserCreate) -> User:",
      "        hashed_password = pwd_context.hash(obj_in.password)",
      "        db_obj = User(",
      "            email=obj_in.email,",
      "            username=obj_in.username,",
      "            hashed_password=hashed_password,",
      "            full_name=obj_in.full_name,",
      "        )",
      "        db.add(db_obj)",
      "        db.commit()",
      "        db.refresh(db_obj)",
      "        return db_obj",
      "",
      "    def authenticate(",
      "        self, db: Session, *, email: str, password: str",
      "    ) -> Optional[User]:",
      "        user = self.get_by_email(db, email=email)",
      "        if not user:",
      "            return None",
      "        if not pwd_context.verify(password, user.hashed_password):",
      "            return None",
      "        return user",
      "",
      "    def is_active(self, user: User) -> bool:",
      "        return user.is_active",
      "",
      "    def is_superuser(self, user: User) -> bool:",
      "        return user.is_superuser",
      "",
      "",
      "user = CRUDUser(User)"
    ],
    "description": "Create User CRUD operations"
  },

  "FastAPI CRUD Item": {
    "prefix": "fastapi-crud-item",
    "body": [
      "from typing import List, Optional",
      "from sqlalchemy.orm import Session",
      "",
      "from app.crud.base import CRUDBase",
      "from app.models.item import Item",
      "from app.schemas.item import ItemCreate, ItemUpdate",
      "",
      "",
      "class CRUDItem(CRUDBase[Item, ItemCreate, ItemUpdate]):",
      "    def get_multi_by_owner(",
      "        self, db: Session, *, owner_id: int, skip: int = 0, limit: int = 100",
      "    ) -> List[Item]:",
      "        return (",
      "            db.query(Item)",
      "            .filter(Item.owner_id == owner_id)",
      "            .offset(skip)",
      "            .limit(limit)",
      "            .all()",
      "        )",
      "",
      "    def create_with_owner(",
      "        self, db: Session, *, obj_in: ItemCreate, owner_id: int",
      "    ) -> Item:",
      "        obj_in_data = obj_in.dict()",
      "        db_obj = Item(**obj_in_data, owner_id=owner_id)",
      "        db.add(db_obj)",
      "        db.commit()",
      "        db.refresh(db_obj)",
      "        return db_obj",
      "",
      "",
      "item = CRUDItem(Item)"
    ],
    "description": "Create Item CRUD operations"
  },

  "FastAPI CRUD Init": {
    "prefix": "fastapi-crud-init",
    "body": [
      "from .base import CRUDBase",
      "from .crud_user import user, CRUDUser",
      "from .crud_item import item, CRUDItem",
      "",
      "# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ CRUD –∫–ª–∞—Å—Å—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
      "__all__ = [\"CRUDBase\", \"user\", \"CRUDUser\", \"item\", \"CRUDItem\"]"
    ],
    "description": "Create CRUD package __init__.py"
  },

  "FastAPI User Endpoints": {
    "prefix": "fastapi-user-endpoints",
    "body": [
      "from fastapi import APIRouter, Depends, HTTPException, status",
      "from sqlalchemy.orm import Session",
      "",
      "from app.db.session import get_db",
      "from app.models.user import User",
      "from app.schemas.user import UserCreate, UserResponse, UserUpdate",
      "from app.crud import user as user_crud",
      "",
      "router = APIRouter()",
      "",
      "",
      "@router.post(\"/\", response_model=UserResponse)",
      "def create_user(user_in: UserCreate, db: Session = Depends(get_db)):",
      "    \"\"\"Create new user.\"\"\"",
      "    user = user_crud.get_by_email(db, email=user_in.email)",
      "    if user:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_400_BAD_REQUEST,",
      "            detail=\"The user with this email already exists.\",",
      "        )",
      "    return user_crud.create(db, obj_in=user_in)",
      "",
      "",
      "@router.get(\"/{user_id}\", response_model=UserResponse)",
      "def read_user(user_id: int, db: Session = Depends(get_db)):",
      "    \"\"\"Get user by ID.\"\"\"",
      "    user = user_crud.get(db, id=user_id)",
      "    if not user:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"User not found\",",
      "        )",
      "    return user",
      "",
      "",
      "@router.get(\"/\", response_model=list[UserResponse])",
      "def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):",
      "    \"\"\"Get multiple users.\"\"\"",
      "    users = user_crud.get_multi(db, skip=skip, limit=limit)",
      "    return users",
      "",
      "",
      "@router.put(\"/{user_id}\", response_model=UserResponse)",
      "def update_user(",
      "    user_id: int, user_in: UserUpdate, db: Session = Depends(get_db)",
      "):",
      "    \"\"\"Update a user.\"\"\"",
      "    user = user_crud.get(db, id=user_id)",
      "    if not user:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"User not found\",",
      "        )",
      "    return user_crud.update(db, db_obj=user, obj_in=user_in)",
      "",
      "",
      "@router.delete(\"/{user_id}\", response_model=UserResponse)",
      "def delete_user(user_id: int, db: Session = Depends(get_db)):",
      "    \"\"\"Delete a user.\"\"\"",
      "    user = user_crud.get(db, id=user_id)",
      "    if not user:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"User not found\",",
      "        )",
      "    return user_crud.remove(db, id=user_id)"
    ],
    "description": "Create User API endpoints"
  },

  "FastAPI Item Endpoints": {
    "prefix": "fastapi-item-endpoints",
    "body": [
      "from fastapi import APIRouter, Depends, HTTPException, status",
      "from sqlalchemy.orm import Session",
      "",
      "from app.db.session import get_db",
      "from app.models.user import User",
      "from app.schemas.item import ItemCreate, ItemResponse, ItemUpdate",
      "from app.crud import item as item_crud",
      "from app.core.security import get_current_user",
      "",
      "router = APIRouter()",
      "",
      "",
      "@router.post(\"/\", response_model=ItemResponse)",
      "def create_item(",
      "    item_in: ItemCreate,",
      "    db: Session = Depends(get_db),",
      "    current_user: User = Depends(get_current_user),",
      "):",
      "    \"\"\"Create new item for the current user.\"\"\"",
      "    return item_crud.create_with_owner(",
      "        db, obj_in=item_in, owner_id=current_user.id",
      "    )",
      "",
      "",
      "@router.get(\"/{item_id}\", response_model=ItemResponse)",
      "def read_item(item_id: int, db: Session = Depends(get_db)):",
      "    \"\"\"Get item by ID.\"\"\"",
      "    item = item_crud.get(db, id=item_id)",
      "    if not item:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"Item not found\",",
      "        )",
      "    return item",
      "",
      "",
      "@router.get(\"/\", response_model=list[ItemResponse])",
      "def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):",
      "    \"\"\"Get multiple items.\"\"\"",
      "    items = item_crud.get_multi(db, skip=skip, limit=limit)",
      "    return items",
      "",
      "",
      "@router.get(\"/my/items\", response_model=list[ItemResponse])",
      "def read_my_items(",
      "    skip: int = 0,",
      "    limit: int = 100,",
      "    db: Session = Depends(get_db),",
      "    current_user: User = Depends(get_current_user),",
      "):",
      "    \"\"\"Get current user's items.\"\"\"",
      "    items = item_crud.get_multi_by_owner(",
      "        db, owner_id=current_user.id, skip=skip, limit=limit",
      "    )",
      "    return items",
      "",
      "",
      "@router.put(\"/{item_id}\", response_model=ItemResponse)",
      "def update_item(",
      "    item_id: int, item_in: ItemUpdate, db: Session = Depends(get_db)",
      "):",
      "    \"\"\"Update an item.\"\"\"",
      "    item = item_crud.get(db, id=item_id)",
      "    if not item:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"Item not found\",",
      "        )",
      "    return item_crud.update(db, db_obj=item, obj_in=item_in)",
      "",
      "",
      "@router.delete(\"/{item_id}\", response_model=ItemResponse)",
      "def delete_item(item_id: int, db: Session = Depends(get_db)):",
      "    \"\"\"Delete an item.\"\"\"",
      "    item = item_crud.get(db, id=item_id)",
      "    if not item:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=\"Item not found\",",
      "        )",
      "    return item_crud.remove(db, id=item_id)"
    ],
    "description": "Create Item API endpoints"
  }
}